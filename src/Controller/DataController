
package Controller;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Scanner;

import Model.Book;
import Model.BookReaderManagement;
import Model.Reader;

public class DataController {
	private static FileWriter fileWriter;
	private static BufferedWriter bufferedWriter;
	private static PrintWriter printWriter;
	private static Scanner scanner;
	
	public static void openFileToWrite(String fileName) {
		try {
		fileWriter = new FileWriter(fileName, true);
		bufferedWriter = new BufferedWriter(fileWriter);
		printWriter = new PrintWriter(bufferedWriter);
	} catch (IOException e) {
		e.printStackTrace();
	}		
}
	
	public static void writeBookToFile(Book book, String fileName) {
		openFileToWrite(fileName);
		printWriter.println(book.getBookID() + "|" + book.getBookName() + "|"
				            + book.getAuthor() + "|" + book.getSpecialization()
				            + "|" + book.getPublishYear() + "|" + book.getQuantity());
		closeFileAfterWrite(fileName);
	}
	
	static void closeFileAfterWrite(String fileName) {
		try {
			printWriter.close();
			bufferedWriter.close();
			fileWriter.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static void writeReaderToFile(Reader reader, String fileName) {
		openFileToWrite(fileName);
		printWriter.println(reader.getReaderID()+ "|" +reader.getFullName() + "|"
				                 + reader.getAddress() + "|" + reader.getPhoneNumber());
		closeFileAfterWrite(fileName);
	}
	
	public static void writeBRMToFile(BookReaderManagement brm, String fileName) {
		openFileToWrite(fileName);
		printWriter.println(brm.getReader().getReaderID()+ "|" +brm.getBook().getBookID()+ "|" +brm.getNumOfBorrow() + "|" + brm.getState());
		closeFileAfterWrite(fileName);
	}
	
	public static void openFileToRead(String fileName) {
		try {
			scanner = new Scanner(Paths.get(fileName));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public static void closeFileAfterRead(String fileName) {
		try {
			scanner.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public static ArrayList<Reader> readReadersFromFile(String fileName) {
		openFileToRead(fileName);
		ArrayList<Reader> readers = new ArrayList<> ();
		while (scanner.hasNextLine()) {
			String data = scanner.nextLine();
			Reader reader = createReaderFromData(data);
			readers.add(reader);
		}
		closeFileAfterRead(fileName);
		return readers;
	}
	
	public static Reader createReaderFromData(String data) {
		String[] datas = data.split("\\|");
		Reader reader = new Reader(Integer.parseInt(datas[0]), datas[1], datas[2], datas[3]);
		return reader;
	}
	
	public static ArrayList<Book> readBooksFromFile(String fileName) {
		openFileToRead(fileName);
		ArrayList<Book> books = new ArrayList<> ();
		while (scanner.hasNextLine()) {
			String datas = scanner.nextLine();
			Book book = createBookFromData(datas);
			books.add(book);
	}
	closeFileAfterRead(fileName);
	return books;
}

	private static Book createBookFromData(String data) {
		String[] datas = data.split("\\|");
		Book book = new Book(Integer.parseInt(datas[0]), datas[1], datas[2], datas[3], Integer.parseInt(datas[4]), Integer.parseInt(datas[5]));
		return book;
	}
	
	public ArrayList<BookReaderManagement> readBRMsFromFile(String fileName) {
		openFileToRead(fileName);
		ArrayList<BookReaderManagement> brms = new ArrayList<> ();
		while (scanner.hasNextLine()) {
			String data = scanner.nextLine();
			BookReaderManagement brm = createBRMFromData(data);
			brms.add(brm);
		}
		closeFileAfterRead(fileName);
		return brms;
	}
	
	public BookReaderManagement createBRMFromData(String data){
		String[] datas = data.split("\\|");
		BookReaderManagement brm = new BookReaderManagement(new Reader(Integer.parseInt(datas[0])),
				                                            new Book(Integer.parseInt(datas[1])),
				                                            Integer.parseInt(datas[2]), datas[3]);
		return brm;
	}
	
	
}
	
	
